307927 REYNOSO AMBRIZ DARIANA IXEL
#######################################################################################################################################
# Teoría

1. 
a) Como excepciones o casos avanzados que van más allá de las primeras tres formas normales.

2. 
WHERE se utiliza antes de agrupar los datos, para filtrar datos individuales. HAVING se usa después de agrupar los datos, para filtrar grupos.

3. 
c) FROM -> WHERE -> SELECT -> ORDER BY

4. 
a) Anomalía de inserción, eliminación y actualización.

5.   
Se están ejecutando los GIT en desorden, entonces el avión llega para recoger a los pasageros con GIT COMMIT y se vuelve a ir vacio con GIT PUSH ejecutado antes de tiempo. Al hacer poner el GIT ADD al final, no hay a donde vallan los pasajeros (archivos) pues el avión ya partió sin ellos y ya no pueden llegar a su destino (el repositorio).

#######################################################################################################################################
# Práctica

1.

```SQL
-- poner solución debajo de este mensaje


SELECT AVG(edad) edad_promedio
FROM alumnos
WHERE apellido LIKE "%ez";


```

2.

```SQL
-- poner solución debajo de este mensaje


SELECT a.nombre, a.apellido,
	MAX(c.calificacion) AS calificacion_maxima
FROM alumnos 
	AS A LEFT JOIN calificaciones AS C ON a.expediente = c.expediente
WHERE c.calificacion IS NOT NULL
GROUP BY a.expediente, a.nombre, a.apellido;


```

3.

```SQL
-- poner solución debajo de este mensaje


SELECT a.nombre, a.apellido, c.nombre_materia, c.calificacion
FROM calificaciones 
	AS C INNER JOIN alumnos AS a USING(expediente)
WHERE c.calificacion > (SELECT AVG(calificacion)
			FROM calificaciones
			WHERE calificacion IS NOT NULL);

```
